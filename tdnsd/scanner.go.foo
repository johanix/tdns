/*
 * Copyright (c) 2024 Johan Stenstam, johani@johani.org
 */

package main

import (
	"log"
	"sync"
	"time"

	"github.com/johanix/tdns/tdns"
	"github.com/miekg/dns"
	"github.com/spf13/viper"
)

type ScanRequest struct {
	Cmd      string
	Zone     string
	ZoneData *tdns.ZoneData
	RRtype   uint16
	Response chan ScanResponse
}

type ScanResponse struct {
	Time    time.Time
	Zone    string
	RRtype  uint16
	Result  tdns.RRset
	Message string
}

func ScannerEngine(conf *Config) error {
	scannerq := conf.Internal.ScannerQ
	interval := viper.GetInt("scanner.interval")
	if interval < 10 {
		interval = 10
	}
	ticker := time.NewTicker(time.Duration(interval) * time.Second)

	var sr ScanRequest

	log.Printf("*** ScannerEngine: starting ***")
	var wg sync.WaitGroup
	wg.Add(1)
	go func() {
		for {
			select {
			case <-ticker.C:
				// log.Printf("Time for periodic scan of all zones.")
				// cds_scanner("")
				// csync_scanner("")

			case sr = <-scannerq:
				switch sr.Cmd {
				case "SCAN":
					if sr.Zone == "" {
						log.Print("ScannerEngine: Zone unspecified. Ignoring.")
						continue
					}
					log.Printf("ScannerEngine: Request for immediate scan of zone %s for RRtype %s",
						sr.Zone, dns.TypeToString[sr.RRtype])
					switch sr.RRtype {
					case dns.TypeCDS:
						log.Printf("go scanner.CheckCDS(%s)", sr)
					case dns.TypeCSYNC:
						log.Printf("go scanner.CheckCSYNC(%s)", sr)
					case dns.TypeDNSKEY:
						log.Printf("go scanner.CheckDNSKEY(%s)", sr)
					}
				default:
					log.Printf("ScannerEngine: Unknown command: '%s'. Ignoring.", sr.Cmd)
				}
			}
		}
	}()
	wg.Wait()

	log.Println("ScannerEngine: terminating")
	return nil
}
